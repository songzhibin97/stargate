# Test configuration for Serverless Function Integration
# This configuration sets up the test scenario for BIC-CL-01

server:
  address: ":8080"
  read_timeout: 30s
  write_timeout: 30s
  idle_timeout: 60s
  max_header_bytes: 1048576

# Serverless Function Integration Configuration for Testing
serverless:
  enabled: true
  default_timeout: 10s
  rules:
    # Test rule: /api/transform
    # This rule demonstrates request body transformation using serverless functions
    - id: "transform-request-test"
      path: "/api/transform"
      method: "POST"
      pre_process:
        # Pre-process function to transform request body
        - id: "pre-transform"
          name: "Request Transformer"
          url: "https://httpbin.org/post"
          method: "POST"
          headers:
            Content-Type: "application/json"
            X-Function-Type: "pre-process"
          timeout: 5s
          retry_count: 2
          on_error: "continue"
      post_process:
        # Post-process function to log response
        - id: "post-log"
          name: "Response Logger"
          url: "https://httpbin.org/post"
          method: "POST"
          headers:
            Content-Type: "application/json"
            X-Function-Type: "post-process"
          timeout: 3s
          retry_count: 1
          on_error: "continue"

    # Test rule: /api/validate
    # This rule demonstrates request validation using serverless functions
    - id: "validate-request-test"
      path: "/api/validate"
      method: "POST"
      headers:
        X-Validate: "true"
      pre_process:
        # Pre-process function to validate request
        - id: "pre-validate"
          name: "Request Validator"
          url: "https://httpbin.org/status/200"
          method: "POST"
          headers:
            Content-Type: "application/json"
            X-Function-Type: "validation"
          timeout: 5s
          retry_count: 1
          on_error: "abort"

    # Test rule: /api/enrich
    # This rule demonstrates request enrichment
    - id: "enrich-request-test"
      path: "/api/enrich"
      method: "GET"
      pre_process:
        # Pre-process function to enrich request with additional data
        - id: "pre-enrich"
          name: "Request Enricher"
          url: "https://jsonplaceholder.typicode.com/users/1"
          method: "GET"
          timeout: 5s
          retry_count: 2
          on_error: "continue"
      post_process:
        # Post-process function to audit the response
        - id: "post-audit"
          name: "Response Auditor"
          url: "https://httpbin.org/post"
          method: "POST"
          headers:
            Content-Type: "application/json"
            X-Function-Type: "audit"
          timeout: 3s
          retry_count: 1
          on_error: "continue"

    # Test rule: /api/error-handling
    # This rule tests error handling scenarios
    - id: "error-handling-test"
      path: "/api/error-handling"
      method: "POST"
      pre_process:
        # Function that will fail to test error handling
        - id: "pre-fail"
          name: "Failing Function"
          url: "https://httpbin.org/status/500"
          method: "POST"
          timeout: 2s
          retry_count: 2
          on_error: "continue"
        # Function that should succeed
        - id: "pre-success"
          name: "Success Function"
          url: "https://httpbin.org/status/200"
          method: "POST"
          timeout: 3s
          retry_count: 1
          on_error: "continue"

# Minimal middleware configuration for testing
auth:
  enabled: false

cors:
  enabled: true
  allowed_origins: ["*"]
  allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
  allowed_headers: ["Content-Type", "Authorization", "X-Validate"]

rate_limit:
  enabled: false

circuit_breaker:
  enabled: false

aggregator:
  enabled: false

ip_acl:
  enabled: false

header_transform:
  enabled: false

mock_response:
  enabled: false

grpc_web:
  enabled: false

traffic_mirror:
  enabled: false

logging:
  access_log:
    enabled: true
    format: "json"
    output: "stdout"
    fields:
      - "timestamp"
      - "method"
      - "path"
      - "status"
      - "duration"
      - "size"

metrics:
  enabled: true
  prometheus:
    enabled: true
    path: "/metrics"
    port: 9090

tracing:
  enabled: false

# Proxy configuration
proxy:
  buffer_size: 32768
  dial_timeout: 10s
  keep_alive: 30s
  max_idle_conns: 100
  max_idle_conns_per_host: 10
  idle_conn_timeout: 90s

# Load balancer configuration
load_balancer:
  default_algorithm: "round_robin"
  health_check_interval: 30s

# Store configuration (not needed for this test)
store:
  type: "memory"

# Sync configuration (not needed for this test)
sync:
  interval: 30s

# Admin API configuration (for monitoring)
admin_api:
  enabled: true
  address: ":8081"
  auth:
    enabled: false

# Routes and upstreams (empty for serverless testing)
routes:
  config_file: ""
  auto_reload: false

upstreams:
  config_file: ""
  auto_reload: false
  defaults:
    algorithm: "round_robin"
    health_check:
      active:
        enabled: false
      passive:
        enabled: false

# Plugins and webhooks (not needed for this test)
plugins:
  enabled: false

webhooks:
  enabled: false
